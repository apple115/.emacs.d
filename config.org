#+TITLE: apple's GNU Emacs Config
#+AUTHOR: apple115
#+auto_tangle:t
#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:
在Emacs刚启动，还未加载主要配置文件时的配置文件。
#+BEGIN_SRC emacs-lisp
;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

;; 设置垃圾回收参数
(setq gc-cons-threshold most-positive-fixnum)
(setq gc-cons-percentage 0.6)
;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
(setq gc-cons-threshold 80000000) ;; original value * 100
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; 启动早期不加载`package.el'包管理器
(setq package-enable-at-startup nil)
;; 不从包缓存中加载
(setq package-quickstart nil)

;; 禁止展示菜单栏、工具栏和纵向滚动条
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; 禁止自动缩放窗口先
(setq frame-inhibit-implied-resize t)

;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)

;; 在这个阶段不编译
(setq inhibit-automatic-native-compilation t)

(provide 'early-init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:
=init.el= 是emacs的主要配置文件
** init.el 文件头
#+begin_src emacs-lisp
;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC
** package 包管理器
#+begin_src emacs-lisp
(require 'package)
(setq package-archives
  '(("melpa"  . "https://melpa.org/packages/")
	("gnu"    . "https://elpa.gnu.org/packages/")
	("nongnu" . "https://elpa.nongnu.org/nongnu/")))
(package-initialize)


#+end_src
** 加模块化配
#+BEGIN_SRC emacs-lisp
;; 将lisp目录放到加载路径的前面以加快启动速度
(let ((dir (locate-user-emacs-file "lisp")))
  (add-to-list 'load-path (file-name-as-directory dir)))

;; 加载各模块化配置
;; 不要在`*message*'缓冲区显示加载模块化配置的信息
(with-temp-message ""
 (require 'init-tools)
 (require 'init-ui)                    ; 加载UI交互的模块化配置文件
 (require 'init-completion) ; 加载完成的模块文件

 (require 'init-org)
 (require 'init-org-set)
 (require 'init-org-capture)
 (require 'init-org-agenda)

 (require 'init-langs)
 (require 'init-edit)
 (require 'init-flyspell)
;; (require 'init-mind-wave)
;;( require 'init-centaur-tabs)
 (require 'init-rime)
;; (require 'init-aweshell)
 (require 'init-hexo)
 (require 'init-auto-yas)
;; (require 'init-sort-tab)
;;(require 'init-tabspaces)

 (require 'init-vertico)
 (require 'init-consult)
 (require 'init-embark)
 (require 'init-marginalia)
 (require 'init-orderless)
 (require 'init-shackle)
;; (require 'init-dashboard)

(require 'init-consult-notes)
(require 'init-vterm)
;;(require 'init-smart-input-source)
;; (require 'init-awesome-tray)
(require 'init-magit)
(require 'init-realgud)
(require 'init-colorful-mode)
(require 'init-devdocs)
(require 'init-bufler)
(require 'init-dired)
(require 'init-doom-modeline)
(require 'init-org-reveal)
(require 'init-gptel)
 ;;(require 'init-eaf)
;; (require 'init-js2)
  )
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
** init.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC

* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:
** init-edit.el 文件头

#+BEGIN_SRC emacs-lisp
;;; init-edit.el --- Editing settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC
**

** myfunc
#+begin_src emacs-lisp

(defun my-load-config ()
"Load Emacs configuration."
(interactive)
(load-file "~/.config/emacs/init.el"))

(defun my-open-termial-kitty ()
"open kitty terminal in load filepath"
(interactive)
(let ((directory (eshell/pwd)))
(async-shell-command (format "kitty --directory %s" directory))
))

(defun open-vterm-in-other-window ()
  "Open a vterm in a new window."
  (interactive)
  (split-window-right)
  (other-window 1)
  (multi-vterm)
)

#+end_src

** evil
#+begin_src emacs-lisp
(use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode 1)
)

(use-package evil-collection
:ensure t
:after evil
:config
(setq evil-collection-mode-list '(ibuffer calendar vterm eshell magit realgud bufler))
(evil-collection-init))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(use-package evil-nerd-commenter
  :ensure t
  :init
  (define-key evil-normal-state-map (kbd "gcc") 'evilnc-comment-or-uncomment-lines)
  (define-key evil-visual-state-map (kbd "gcc") 'evilnc-comment-or-uncomment-lines)
)

(setq x-select-request-type nil)


#+end_src
** avy
#+begin_src emacs-lisp
  (use-package avy
   :ensure t)
#+end_src
** sudo-edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :ensure t
)
#+end_src
** saveplace 记住光标的位置
#+begin_src emacs-lisp
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))
#+end_src
** so-long
#+begin_src emacs-lisp
(use-package so-long
  :ensure nil
  :config (global-so-long-mode 1))
#+end_src
** smart-input-sourc
##+begin_src emacs-lisp
(use-package sis
  ;; :hook
  ;; enable the /context/ and /inline region/ mode for specific buffers
  ;; (((text-mode prog-mode) . sis-context-mode)
  ;;  ((text-mode prog-mode) . sis-inline-mode))
  :ensure t
  :config


  (sis-ism-lazyman-config "1" "2" 'fcitx5)
  ;; enable the /cursor color/ mode
  ;;(sis-global-cursor-color-mode t)
  ;; enable the /respect/ mode
  ;;(sis-global-respect-mode t)
  ;; enable the /context/ mode for all buffers
  ;;(sis-global-context-mode t)
  ;; enable the /inline english/ mode for all buffers
  ;;(sis-global-inline-mode t)
  )

##+end_src
** 括号补全
#+begin_src emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (after-init . electric-pair-mode)
  :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))
#+end_src

** general
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer dt/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "M-SPC") ;; access leader in insert mode


  (dt/leader-keys
   "SPC" '(bufler-switch-buffer :wk "bufler")
   )

  (dt/leader-keys
   "." '(find-file :wk "find file")
   "g"'(:ignore t :wk "goto")
   "g c" '((lambda () (interactive) (find-file "~/.emacs.d")) :wk "Edit emacs config")
   "g s" '((lambda () (interactive) (find-file "~/.emacs.d/snippets")) :wk "Edit emacs snippet")
   "g b" '((lambda () (interactive) (find-file "~/blog")) :wk "blog")
   )

  (dt/leader-keys
    "f" '(:ignore t :wk "Find")
    "f f" '(consult-fd :wk "find file")
    "f w" '(consult-ripgrep :wk "find word")
    "f m" '(consult-man :wk "find man")
    "f n" '(consult-notes :wk "find notes")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file")
  )


  (dt/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b b" '(consult-buffer :wk "Switch buffer")
    "b k" '(kill-buffer :wk "kill buffer")
    "b i" '(bufler :wk "Ibuffer")
    "b r" '(revert-buffer :wk "Reload buffer")
   )

  (dt/leader-keys
    "e" '(:ignore t :wk "Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region"))






   (dt/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '(my-load-config :wk "Reload Emacs config")
)

   (dt/leader-keys
    "5" '(projectile-run-project :wk "run project")
    "6" '(projectile-test-project :wk "test project")
    "9" '(projectile-compile-project :wk "compile project")
    "=" '((lambda () (interactive) (format-all-buffer)) :wk "current buffer format")
)

   (dt/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t t" '(my-open-termial-kitty :wk "open terminal")
   )

   (dt/leader-keys
    "o" '(:ignore t :wk "open")
    "o o" '(embark-act :wk "embark-act")
    "o t" '(vterm-toggle-insert-cd :wk "open terminal")
    "o s" '(async-shell-command :wk "open async shell command")
    "o c" '((lambda () (interactive) (org-capture)) :wk "open org-capture")
    "o a" '((lambda () (interactive) (org-agenda)) :wk "open org-agenda"))

   (dt/leader-keys
    "x" '(:ignore t :wk "fix")
    "x x" '(lsp-bridge-diagnostic-list :wk "show diagnostic list")
    "x c" '(lsp-bridge-diagnostic-copy :wk "copy diagnostic list"))

   (dt/leader-keys
    "p" '(:ignore t :wk "project")
    "p p" '(projectile-switch-project :wk "project switch project")
    "p f" '(projectile-find-file :wk "project find file")
    "p d" '(projectile-dired :wk "project dired")
    "p b" '(projectile-switch-to-buffer :wk "project switch buffer"))

   (dt/leader-keys
    "d" '(:ignore t :wk "denote")
    "d n" '(denote :wk "create denote")
    "d d" '(denote-date :wk "create date note")
    "d t" '(denote-type :wk "creates a note while prompting for a file type")
    "d s" '(denote-subdirectory :wk "create note ")
    "d f" '(denote-open-or-create :wk "find denote")
    "d r" '(denote-dired-rename-file :wk "rename denote"))


)

#+end_src
** keymap
#+begin_src emacs-lisp

(global-unset-key (kbd "C-SPC"))
(global-set-key (kbd "C-x 4 t") 'open-vterm-in-other-window)

  (evil-define-key 'normal global-map (kbd "C-.") 'popper-toggle)
  (evil-define-key 'normal global-map (kbd "M-.") 'popper-cycle)

  (evil-define-key 'normal global-map (kbd "m") 'consult-register-store)
  (evil-define-key 'normal global-map (kbd "'") 'consult-register-load)

  (evil-define-key 'insert global-map (kbd "C-.") 'popper-toggle)
  (evil-define-key 'insert global-map (kbd "M-.") 'popper-cycle)

;; 定义快捷键在 rust-mode 下生效
(with-eval-after-load 'prog-mode
  (evil-define-key 'normal prog-mode-map (kbd "K") 'lsp-bridge-show-documentation)
  (evil-define-key 'normal prog-mode-map (kbd "gd") 'lsp-bridge-find-def)
  (evil-define-key 'normal prog-mode-map (kbd "gi") 'lsp-bridge-find-imp)
  (evil-define-key 'normal prog-mode-map (kbd "go") 'lsp-bridge-find-def-return)
)

(with-eval-after-load 'rust-mode
)

;; 定义快捷键在 python-mode 下生效
(with-eval-after-load 'python-mode
)


(general-define-key
 :states '(normal visual)
 :keymaps 'org-mode-map
 :prefix "SPC"
  "c" '(:ignore t :wk "mode define command")
  "c c" '(org-toggle-checkbox  :wk"toggle-checkbox")
)

(general-define-key
 :states '(normal visual)
 :keymaps 'override
 :prefix "SPC"
  "c" '(:ignore t :wk "mode define command")
  "c o" '(xah-open-in-external-app :wk"open the file with xopen")
  "c p" '(my-paste-to-dired  :wk "past some in the dired")
)

;; 可以继续为其他模式添加类似的代码

(evil-collection-define-key 'insert 'lsp-bridge-mode-map (kbd "C-n") #'acm-select-next)
(evil-collection-define-key 'insert 'lsp-bridge-mode-map (kbd "C-p") #'acm-select-prev)

;; agenda

(add-hook 'org-agenda-mode-hook
          (lambda ()
            (evil-set-initial-state 'org-agenda-mode 'normal)))
  (evil-define-key 'normal org-agenda-mode-map (kbd "q") 'org-agenda-quit)


  (evil-define-key 'normal org-agenda-mode-map (kbd "j") 'org-agenda-next-line)
  (evil-define-key 'normal org-agenda-mode-map (kbd "k") 'org-agenda-previous-line)


  (evil-define-key 'normal org-agenda-mode-map (kbd "<tab>") 'org-agenda-todo)
  (evil-define-key 'normal org-agenda-mode-map (kbd "gc") 'org-agenda-goto-calender)
  (evil-define-key 'normal org-agenda-mode-map (kbd "gr") 'org-agenda-redo)

  (evil-define-key 'normal org-agenda-mode-map (kbd "u") 'org-agenda-undo)

;; capture
(add-hook 'org-capture-mode-hook
          (lambda ()
            (evil-set-initial-state 'org-capture-mode 'normal)))

;; vim keymap setting
  (evil-define-key  'normal prog-mode-map (kbd "s") 'avy-goto-char-2)
  (evil-define-key  'normal text-mode-map (kbd "s") 'avy-goto-char-2)

  (evil-define-key  'insert prog-mode-map (kbd "C-y") 'yas-expand)
  (evil-define-key  'insert text-mode-map (kbd "C-y") 'yas-expand)

  (evil-define-key 'normal org-mode-map (kbd "<tab>") 'org-cycle)

  (evil-define-key 'normal global-map (kbd "H") 'evil-beginning-of-line)
  (evil-define-key 'normal global-map (kbd "L") 'evil-end-of-line)
  (evil-define-key 'visual global-map (kbd "H") 'evil-beginning-of-line)
  (evil-define-key 'visual global-map (kbd "L") 'evil-end-of-line)


#+end_src

** init-edit.el 文件尾

#+BEGIN_SRC emacs-lisp
;; (message "init-base configuration: %.2fs"
;;          (float-time (time-subtract (current-time) my/init-base-start-time)))

(provide 'init-edit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-edit.el ends here
#+END_SRC

* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:
** init-ui.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-ui.el --- UI settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC

** gruvbox 主题
#+begin_src emacs-lisp
(load-theme 'gruvbox-light-soft t)
#+end_src
** 字体设置
#+begin_src emacs-lisp

(defun my-apply-font()
(set-face-attribute 'default nil :font (font-spec :family "Inconsolata" :size 18 :weight 'bold))
 ;; (set-fontset-font t 'unicode (font-spec :family "Noto Color Emoji" :size 14))
(set-fontset-font t '(#x2ff0 . #x9ffc) (font-spec :family "LXGW WenKai" :size 18 :weight 'bold))
)
(my-apply-font)
(add-hook 'after-make-frame-functions
          (lambda (frame)
            (select-frame frame)
            (my-apply-font)))
;;测试一下这个

#+end_src
#+CAPTION: 测试中英文字体对齐
#+NAME: 测试中英文字体对齐
|中文|
|abcd|

** 其他UI设置
#+begin_src emacs-lisp
 ;; 禁用一些GUI特性
 (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
 (setq inhibit-default-init t)           ; 不加载 `default' 库
 (setq inhibit-startup-screen t)         ; 不加载启动画面
 (setq inhibit-startup-message t)        ; 不加载启动消息
 (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

 ;; 草稿缓冲区默认文字设置
 (setq initial-scratch-message (concat ";; Happy hacking, "
                                       (capitalize user-login-name) " - Emacs ♥ you!\n\n"))

 ;; 设置缓冲区的文字无
  (setq-default bidi-display-reordering nil)
   (setq bidi-inhibit-bpa t
      long-line-threshold 1000
      large-hscroll-threshold 1000
      syntax-wholeline-max 1000)
 ;; 禁止使用双向括号算法
 ;; (setq bidi-inhibit-bpa t)

 ;; 设置自动折行宽度为80个字符，默认值为70
 (setq-default fill-column 80)

 ;; 设置大文件阈值为100MB，默认10MB
 (setq large-file-warning-threshold 100000000)

 ;; 以16进制显示字节数
 (setq display-raw-bytes-as-hex t)
 ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
 (setq redisplay-skip-fontification-on-input t)

 ;; 禁止响铃
 (setq ring-bell-function 'ignore)

 ;; 禁止闪烁光标
 (blink-cursor-mode -1)

 ;; 在光标处而非鼠标所在位置粘贴
 (setq mouse-yank-at-point t)

 ;; 拷贝粘贴设置
 (setq select-enable-primary nil)        ; 选择文字时不拷贝
 (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

 ;; 鼠标滚动设置
 (setq scroll-step 2)
 (setq scroll-margin 2)
 (setq hscroll-step 2)
 (setq hscroll-margin 2)
 (setq scroll-conservatively 101)
 (setq scroll-up-aggressively 0.01)
 (setq scroll-down-aggressively 0.01)
 (setq scroll-preserve-screen-position 'always)

 ;; 对于高的行禁止自动垂直滚动
 (setq auto-window-vscroll nil)

 ;; 设置新分屏打开的位置的阈值
 (setq split-width-threshold (assoc-default 'width default-frame-alist))
 (setq split-height-threshold nil)

 ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
 (setq-default indent-tabs-mode nil)
 (setq-default tab-width 4)

 ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
(setq original-y-or-n-p 'y-or-n-p)
(defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
(defun default-yes-sometimes (prompt)
  "automatically say y when buffer name match following string"
  (if (or
           (string-match "has a running process" prompt)
           ;; (string-match "does not exist; create" prompt)
           ;; (string-match "modified; kill anyway" prompt)
           ;; (string-match "Delete buffer using" prompt)
           ;; (string-match "Kill buffer of" prompt)
           ;; (string-match "still connected.  Kill it?" prompt)
           ;; (string-match "Shutdown the client's kernel" prompt)
           ;; (string-match "kill them and exit anyway" prompt)
           ;; (string-match "Revert buffer from file" prompt)
           ;; (string-match "Kill Dired buffer of" prompt)
           ;; (string-match "delete buffer using" prompt)
           ;; (string-match "Kill all pass entry" prompt)
           ;; (string-match "for all cursors" prompt)
           ;; (string-match "Do you want edit the entry" prompt)
)
          t
    (original-y-or-n-p prompt)))
(defalias 'yes-or-no-p 'default-yes-sometimes)
(defalias 'y-or-n-p 'default-yes-sometimes)

 ;; 设置剪贴板历史长度300，默认为60
 (setq kill-ring-max 200)

 ;; 在剪贴板里不存储重复内容
 (setq kill-do-not-save-duplicates t)

 ;; 设置位置记录长度为6，默认为16
 ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
 ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
 ;; 使用 C-u C-SPC 跳转到本地位置处
 (setq mark-ring-max 6)
 (setq global-mark-ring-max 6)

 ;; 设置 emacs-lisp 的限制
 (setq max-lisp-eval-depth 10000)        ; 默认值为 800
 (setq max-specpdl-size 10000)           ; 默认值为 1600

 ;; 启用 `list-timers', `list-threads' 这两个命令
 (put 'list-timers 'disabled nil)
 (put 'list-threads 'disabled nil)

 ;; 在命令行里支持鼠标
 (xterm-mouse-mode 1)

 ;; 退出Emacs时进行确认
 (setq confirm-kill-emacs 'y-or-n-p)

 ;; 在模式栏上显示当前光标的列号
(defun display-line-numbers-equalize ()
  "Equalize The width"
  (setq display-line-numbers-width (length (number-to-string (line-number-at-pos (point-max))))))
(add-hook 'find-file-hook 'display-line-numbers-equalize)
 (setq column-number-mode t)
  ;; 显示行号 和 文本显示中的截断或省略
  (global-display-line-numbers-mode -1)
  (global-visual-line-mode t)
#+end_src
** 编码设置
#+begin_src emacs-lisp
;; 配置所有的编码为UTF-8，参考：
;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

#+end_src

** 彩虹括号
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)

#+end_src
** line设置
##+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
##+end_src

** init-ui.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+END_SRC

*projectile init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:
Emacs的补全系统
* init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:
** init-completion.el 文件头

#+BEGIN_SRC emacs-lisp
;;; init-completion.el --- Completion settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC
** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
;;(setq yas-snippet-dirs '("~/.config/emacs/snippets"))
 (yas-global-mode 1)
)
#+end_src

** lsp-bridge 的依赖
#+begin_src emacs-lisp
  (use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
         ("C-c C-e" . markdown-do)))
#+end_src

** lsp-bridge
#+begin_src emacs-lisp
 (use-package lsp-bridge
 :load-path "./site-lisp/lsp-bridge"
 :config

;;(setq acm-backend-copilot-network-proxy '(:host "127.0.0.1" :port 20171))

 ;;   (setq lsp-bridge-enable-log t)
;;    (setq acm-quick-access-use-number-select t)
    (setq lsp-bridge-python-command "/home/apple115/.emacs.d/site-lisp/my-emacs-python/bin/python3.11")
    (setq acm-enable-copilot t)
    (setq acm-candidate-match-function 'orderless-flex)
    ;;(setq lsp-bridge-enable-auto-format-code t);;自动格式化
    (setq lsp-bridge-enable-completion-in-string t)
    (setq lsp-bridge-enable-search-words  t)
    (setq lsp-bridge-multi-lang-server-extension-list '(
    (("jsx") . "typescript_tailwindcss")
    (("html") . "html_tailwindcss")
    ))
    ;;(setq lsp-bridge-enable-org-babel t)
    (setq lsp-bridge-enable-hover-diagnostic t)
    (global-lsp-bridge-mode)
;; (define-key acm-mode-map (kbd "M-1") (lambda () (interactive) (insert "1")))
;; (define-key acm-mode-map (kbd "M-2") (lambda () (interactive) (insert "2")))
;; (define-key acm-mode-map (kbd "M-3") (lambda () (interactive) (insert "3")))
;; (define-key acm-mode-map (kbd "M-4") (lambda () (interactive) (insert "4")))
;; (define-key acm-mode-map (kbd "M-5") (lambda () (interactive) (insert "5")))
;; (define-key acm-mode-map (kbd "M-6") (lambda () (interactive) (insert "6")))
;; (define-key acm-mode-map (kbd "M-7") (lambda () (interactive) (insert "7")))
;; (define-key acm-mode-map (kbd "M-8") (lambda () (interactive) (insert "8")))
;; (define-key acm-mode-map (kbd "M-9") (lambda () (interactive) (insert "9")))
;; (define-key acm-mode-map (kbd "M-0") (lambda () (interactive) (insert "0")))
   (define-key acm-mode-map (kbd "<tab>") 'nil)
)
#+end_src
** init-completion.el 文件尾
#+begin_src emacs-lisp

(provide 'init-completion)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-completion.el ends here

#+end_src

* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:
org的配置
** init-org.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:


#+END_SRC
** org moderm
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)
  ;; 复选框美化
  ;; (setq org-modern-checkbox
  ;;       '((?X . #("▢✓" 0 2 (composition ((2)))))
  ;;         (?- . #("▢–" 0 2 (composition ((2)))))
  ;;         (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
  (setq org-modern-block-fringe t)
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name t)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword t)
  )
#+end_src

** calender
#+begin_src emacs-lisp
    (use-package calendar
      :ensure nil
      :hook (calendar-today-visible . calendar-mark-today)
      :custom
      ;; 是否显示中国节日，我们使用 `cal-chinese-x' 插件
      (calendar-chinese-all-holidays-flag nil)
      ;; 是否显示节日
      (calendar-mark-holidays-flag t)
      ;; 是否显示Emacs的日记，我们使用org的日记
      (calendar-mark-diary-entries-flag nil)
      ;; 数字方式显示时区，如 +0800，默认是字符方式如 CST
      (calendar-time-zone-style 'numeric)
      ;; 日期显示方式：year/month/day
      (calendar-date-style 'iso)
      ;; 中文天干地支设置
      (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
      (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
      ;; 设置中文月份
      (calendar-month-name-array ["一月" "二月" "三月" "四月" "五月" "六月" "七月" "八月" "九月" "十月" "十一月" "十二月"])
      ;; 设置星期标题显示
      (calendar-day-name-array ["日" "一" "二" "三" "四" "五" "六"])
      ;; 周一作为一周第一天
      (calendar-week-start-day 1)
      )
  ;; 时间解析增加中文拼音
  (use-package parse-time
    :ensure nil
    :defer t
    :config
    (setq parse-time-months
          (append '(("yiy" . 1) ("ery" . 2) ("sany" . 3)
                    ("siy" . 4) ("wuy" . 5) ("liuy" . 6)
                    ("qiy" . 7) ("bay" . 8) ("jiuy" . 9)
                    ("shiy" . 10) ("shiyiy" . 11) ("shiery" . 12)
                    ("yiyue" . 1) ("eryue" . 2) ("sanyue" . 3)
                    ("siyue" . 4) ("wuyue" . 5) ("liuyue" . 6)
                    ("qiyue" . 7) ("bayue" . 8) ("jiuyue" . 9)
                    ("shiyue" . 10) ("shiyiyue" . 11) ("shieryue" . 12))
                  parse-time-months))

    (setq parse-time-weekdays
          (append '(("zri" . 0) ("zqi" . 0)
                    ("zyi" . 1) ("zer" . 2) ("zsan" . 3)
                    ("zsi" . 4) ("zwu" . 5) ("zliu" . 6)
                    ("zr" . 0) ("zq" . 0)
                    ("zy" . 1) ("ze" . 2) ("zs" . 3)
                    ("zsi" . 4) ("zw" . 5) ("zl" . 6))
                  parse-time-weekdays)))

  ;; 中国节日设置
  (use-package cal-china-x
    :ensure t
    :commands cal-china-x-setup
    :hook (after-init . cal-china-x-setup)
    :config
    ;; 重要节日设置
    (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
    ;; 所有节日设置
    (setq cal-china-x-general-holidays
          '(;;公历节日
            (holiday-fixed 1 1 "元旦")
            (holiday-fixed 2 14 "情人节")
            (holiday-fixed 3 8 "妇女节")
            (holiday-fixed 3 14 "白色情人节")
            (holiday-fixed 4 1 "愚人节")
            (holiday-fixed 5 1 "劳动节")
            (holiday-fixed 5 4 "青年节")
            (holiday-float 5 0 2 "母亲节")
            (holiday-fixed 6 1 "儿童节")
            (holiday-float 6 0 3 "父亲节")
            (holiday-fixed 9 10 "教师节")
            (holiday-fixed 10 1 "国庆节")
            (holiday-fixed 10 2 "国庆节")
            (holiday-fixed 10 3 "国庆节")
            (holiday-fixed 10 24 "程序员节")
            (holiday-fixed 11 11 "双11购物节")
            (holiday-fixed 12 25 "圣诞节")
            ;; 农历节日
            (holiday-lunar 12 30 "春节" 0)
            (holiday-lunar 1 1 "春节" 0)
            (holiday-lunar 1 2 "春节" 0)
            (holiday-lunar 1 15 "元宵节" 0)
            (holiday-solar-term "清明" "清明节")
            (holiday-solar-term "小寒" "小寒")
            (holiday-solar-term "大寒" "大寒")
            (holiday-solar-term "立春" "立春")
            (holiday-solar-term "雨水" "雨水")
            (holiday-solar-term "惊蛰" "惊蛰")
            (holiday-solar-term "春分" "春分")
            (holiday-solar-term "谷雨" "谷雨")
            (holiday-solar-term "立夏" "立夏")
            (holiday-solar-term "小满" "小满")
            (holiday-solar-term "芒种" "芒种")
            (holiday-solar-term "夏至" "夏至")
            (holiday-solar-term "小暑" "小暑")
            (holiday-solar-term "大暑" "大暑")
            (holiday-solar-term "立秋" "立秋")
            (holiday-solar-term "处暑" "处暑")
            (holiday-solar-term "白露" "白露")
            (holiday-solar-term "秋分" "秋分")
            (holiday-solar-term "寒露" "寒露")
            (holiday-solar-term "霜降" "霜降")
            (holiday-solar-term "立冬" "立冬")
            (holiday-solar-term "小雪" "小雪")
            (holiday-solar-term "大雪" "大雪")
            (holiday-solar-term "冬至" "冬至")
            (holiday-lunar 5 5 "端午节" 0)
            (holiday-lunar 8 15 "中秋节" 0)
            (holiday-lunar 7 7 "七夕情人节" 0)
            (holiday-lunar 12 8 "腊八节" 0)
            (holiday-lunar 9 9 "重阳节" 0)))
    ;; 设置日历的节日，通用节日已经包含了所有节日
    (setq calendar-holidays (append cal-china-x-general-holidays)))
#+end_src
** org-src
#+begin_src emacs-lisp
(defun add-list-to-list (dst src)
  "Similar to `add-to-list', but accepts a list as 2nd argument"
  (set dst
       (append (eval dst) src)))
#+end_src

** denote 使用
#+begin_src emacs-lisp
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode-in-directories)
  :bind (("C-c d n" . denote)
         ("C-c d d" . denote-date)
         ("C-c d t" . denote-type)
         ("C-c d s" . denote-subdirectory)
         ("C-c d f" . denote-open-or-create)
         ("C-c d r" . denote-dired-rename-file))
  :config
  (setq denote-directory (expand-file-name "~/Nutstore Files/Nutstore/org/denote"))
  (setq denote-known-keywords '("emacs" "entertainment" "reading" "studying"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  ;; org is default, set others such as text, markdown-yaml, markdown-toml
  (setq denote-file-type nil)
  (setq denote-prompts '(title keywords))

  ;; We allow multi-word keywords by default.  The author's personal
  ;; preference is for single-word keywords for a more rigid workflow.
  (setq denote-allow-multi-word-keywords t)
  (setq denote-date-format nil)

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
  (setq denote-dired-rename-expert nil)

  ;; OR if only want it in `denote-dired-directories':
  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  )
#+end_src
** plantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure t
  :mode ("\\.plantuml\\'" . plantuml-mode)
  :init
  ;; enable plantuml babel support
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                       '((plantuml . t))))
  :config
  (setq org-plantuml-exec-mode 'plantuml)
  (setq org-plantuml-executable-path "plantuml")
  (setq plantuml-executable-path "plantuml")
  (setq plantuml-default-exec-mode 'executable)
  ;; set default babel header arguments
  (setq org-babel-default-header-args:plantuml
        '((:exports . "results")
          (:results . "file")
          ))
  )
#+end_src
** org转换
#+begin_src emacs-lisp
(use-package ox
  :ensure nil
  :custom
  (org-export-with-toc t)
  (org-export-with-tags 'not-in-toc)
  (org-export-with-drawers nil)
  (org-export-with-priority t)
  (org-export-with-footnotes t)
  (org-export-with-smart-quotes t)
  (org-export-with-section-numbers t)
  (org-export-with-sub-superscripts '{})
  ;; `org-export-use-babel' set to nil will cause all source block header arguments to be ignored This means that code blocks with the argument :exports none or :exports results will end up in the export.
  ;; See:
  ;; https://stackoverflow.com/questions/29952543/how-do-i-prevent-org-mode-from-executing-all-of-the-babel-source-blocks
  (org-export-use-babel t)
  (org-export-headline-levels 9)
  (org-export-coding-system 'utf-8)
  (org-export-with-broken-links 'mark)
  (org-export-default-language "zh-CN") ; 默认是en
  ;; (org-ascii-text-width 72)
  )
;; export extra

(use-package ox-gfm
  :ensure t
  :after ox)
#+end_src

** org-len
#+begin_src emacs-lisp
(require 'ob-python)
(require 'ob-C)
#+end_src

** org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )
#+end_src

** init-org.el 文件未
#+BEGIN_SRC emacs-lisp
(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC

* init-tools.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-tools.el :mkdirp yes
:END:
** init-tools.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-tools.el --- Tools settings -*- lexical-binding: t -*-
;;; Commentary: Useful tools to make Emacs efficient!

;;; Code:

#+END_SRC
** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → " ))
#+end_src
**
** auto-save
#+begin_src emacs-lisp
  (use-package auto-save
  :load-path "./site-lisp/auto-save"
  :config
(auto-save-enable)
(setq auto-save-silent t)
(setq auto-save-delete-trailing-whitespace t)
)
#+end_src
** treesit
#+begin_src emacs-lisp
  (require 'treesit)
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (cmake . ("https://github.com/uyha/tree-sitter-cmake"))
          (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
          (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
          (elisp . ("https://github.com/Wilfred/tree-sitter-elisp"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (markdown . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
          (org . ("https://github.com/milisims/tree-sitter-org"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (vue . ("https://github.com/merico-dev/tree-sitter-vue"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))


(setq major-mode-remap-alist
      '((c-mode          . c-ts-mode)
        (c++-mode        . c++-ts-mode)
        (cmake-mode      . cmake-ts-mode)
        (conf-toml-mode  . toml-ts-mode)
        (css-mode        . css-ts-mode)
        (js-mode         . js-ts-mode)
        (js-json-mode    . json-ts-mode)
        (python-mode     . python-ts-mode)
        (sh-mode         . bash-ts-mode)
        (typescript-mode . typescript-ts-mode)))


(add-hook 'emacs-lisp-mode-hook #'(lambda () (treesit-parser-create 'elisp)))
(add-to-list 'auto-mode-alist '("\\.ts\\'". typescript-ts-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'". tsx-ts-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'". js-ts-mode))
(add-to-list 'auto-mode-alist '("\\.json\\'". json-ts-mode))
(add-to-list 'auto-mode-alist '("\\.yml\\'".yaml-ts-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'".css-ts-mode))

#+end_src
** fingertip
#+begin_src emacs-lisp
  (use-package fingertip
  :load-path "./site-lisp/fingertip"
  :config
  (dolist (hook (list
                 'c-mode-common-hook
                 'c-mode-hook
                 'c++-mode-hook
                 'java-mode-hook
                 'haskell-mode-hook
                 'emacs-lisp-mode-hook
                 'lisp-interaction-mode-hook
                 'lisp-mode-hook
                 'maxima-mode-hook
                 'ielm-mode-hook
                 'sh-mode-hook
                 'makefile-gmake-mode-hook
                 'php-mode-hook
                 'python-mode-hook
                 'js-mode-hook
                 'go-mode-hook
                 'qml-mode-hook
                 'jade-mode-hook
                 'css-mode-hook
                 'ruby-mode-hook
                 'coffee-mode-hook
                 'rust-mode-hook
                 'rust-ts-mode-hook
                 'qmake-mode-hook
                 'lua-mode-hook
                 'swift-mode-hook
                 'web-mode-hook
                 'markdown-mode-hook
                 'llvm-mode-hook
                 'conf-toml-mode-hook
                 'nim-mode-hook
                 'typescript-mode-hook
                 'c-ts-mode-hook
                 'c++-ts-mode-hook
                 'cmake-ts-mode-hook
                 'toml-ts-mode-hook
                 'css-ts-mode-hook
                 'js-ts-mode-hook
                 'json-ts-mode-hook
                 'python-ts-mode-hook
                 'bash-ts-mode-hook
                 'typescript-ts-mode-hook
                 ))
    (add-hook hook #'(lambda () (fingertip-mode 1))))
    )
#+end_src
** 备份设置
#+begin_src emacs-lisp
(setq make-backup-files nil)                                  ; 不自动备份
(setq auto-save-default nil)                                  ; 不使用Emacs自带的自动保存
#+end_src

** projectile 使用
使用这个projectile 管理项目
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq truncate-lines nil) ; 如果单行信息很长会自动换行
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'rust-clippy 'rust-mode)
  (flycheck-add-mode 'haskell-ghc 'haskell-mode))
  ;; :hook
  ;; (prog-mode . flycheck-mode))

(with-eval-after-load 'flycheck
  (setq flycheck-check-syntax-automatically '(idle-change new-line mode-enabled)))
#+end_src

** formatter-all
#+begin_src emacs-lisp
(use-package format-all
  :ensure t
  :commands format-all-mode
  ;;:hook (prog-mode . format-all-mode)
  :config
  (setq-default format-all-formatters
                '(("C"     (astyle "--mode=c"))
                  ("Shell" (shfmt "-i" "4" "-ci"))
                  ("JavaScript" (prettier "-w"))
                  ("TypeScript" (prettier "-w"))
                  ("YAML" (prettier "-w"))
                  ("JSX" (prettier "-w"))
                  ("TSX" (prettier "-w"))
                  ("Haskell" (stylish-haskell))
                  ("Rust" (rustfmt))
                  ("Python" (black))
                  ("C++" (clang-format "-style=Google"))
)))
#+end_src

** emacs的shell 的 环境设置
#+begin_src emacs-lisp
(use-package envrc
  :ensure t
  :config
(envrc-global-mode)
)

#+end_src

** popper弹窗
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          "\\*quickrun\\*"
          "Aweshell"
         "\\*compilation\\*"
         "\\*vterm\\*"
         "\\*lsp-bridge-doc\\*"
          help-mode
          compilation-mode))

  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints

#+end_src
** dired 增强
#+begin_src emacs-lisp
#+end_src

** init-tools.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-tools)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-tools.el ends here
#+END_SRC

* init-langs.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-langs.el :mkdirp yes
:END:
** init-langs.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-langs.el --- Langs settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:

#+END_SRC
** rust-mode
#+begin_src emacs-lisp
(use-package rust-mode
:ensure t
:config
;;(setq rust-format-on-save t)

)
#+end_src

** haskell-mode

#+begin_src emacs-lisp
(use-package haskell-mode
:ensure t
)
#+end_src

** python-mode
#+begin_src emacs-lisp
(use-package python-mode
:ensure t
:mode ("\\.py\\'" . python-mode)
:config
 (setq python-indent-offset 4)
)
#+end_src
** shell-mode
#+begin_src emacs-lisp
(use-package sh-script
  :ensure nil
  :mode (("\\.sh\\'"     . sh-mode)
         ("zshrc"        . sh-mode)
         ("zshenv"       . sh-mode)
         ("/PKGBUILD\\'" . sh-mode))
  :hook (sh-mode . sh-mode-setup)
  :custom
  (sh-basic-offset 2)
  (sh-indentation 2))
#+end_src
** commonlisp-mode
##+begin_src emacs-lisp
(use-package slime
  :ensure t
)
##+end_src
** 前端
#+begin_src emacs-lisp

#+end_src

** init-langs.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-langs)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-langs.el ends here
#+END_SRC
